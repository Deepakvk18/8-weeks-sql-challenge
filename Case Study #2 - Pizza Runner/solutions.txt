**Schema (PostgreSQL v13)**

    CREATE SCHEMA pizza_runner;
    SET search_path = pizza_runner;
    
    DROP TABLE IF EXISTS runners;
    CREATE TABLE runners (
      "runner_id" INTEGER,
      "registration_date" DATE
    );
    INSERT INTO runners
      ("runner_id", "registration_date")
    VALUES
      (1, '2021-01-01'),
      (2, '2021-01-03'),
      (3, '2021-01-08'),
      (4, '2021-01-15');
    
    
    DROP TABLE IF EXISTS customer_orders;
    CREATE TABLE customer_orders (
      "order_id" INTEGER,
      "customer_id" INTEGER,
      "pizza_id" INTEGER,
      "exclusions" VARCHAR(4),
      "extras" VARCHAR(4),
      "order_time" TIMESTAMP
    );
    
    INSERT INTO customer_orders
      ("order_id", "customer_id", "pizza_id", "exclusions", "extras", "order_time")
    VALUES
      ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
      ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
      ('3', '102', '1', '', '', '2020-01-02 23:51:23'),
      ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),
      ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
      ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
      ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
      ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
      ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
      ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
      ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
      ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
      ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
      ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');
    
    
    DROP TABLE IF EXISTS runner_orders;
    CREATE TABLE runner_orders (
      "order_id" INTEGER,
      "runner_id" INTEGER,
      "pickup_time" VARCHAR(19),
      "distance" VARCHAR(7),
      "duration" VARCHAR(10),
      "cancellation" VARCHAR(23)
    );
    
    INSERT INTO runner_orders
      ("order_id", "runner_id", "pickup_time", "distance", "duration", "cancellation")
    VALUES
      ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
      ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
      ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
      ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
      ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
      ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),
      ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
      ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
      ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),
      ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');
    
    
    DROP TABLE IF EXISTS pizza_names;
    CREATE TABLE pizza_names (
      "pizza_id" INTEGER,
      "pizza_name" TEXT
    );
    INSERT INTO pizza_names
      ("pizza_id", "pizza_name")
    VALUES
      (1, 'Meatlovers'),
      (2, 'Vegetarian');
    
    
    DROP TABLE IF EXISTS pizza_recipes;
    CREATE TABLE pizza_recipes (
      "pizza_id" INTEGER,
      "toppings" TEXT
    );
    INSERT INTO pizza_recipes
      ("pizza_id", "toppings")
    VALUES
      (1, '1, 2, 3, 4, 5, 6, 8, 10'),
      (2, '4, 6, 7, 9, 11, 12');
    
    
    DROP TABLE IF EXISTS pizza_toppings;
    CREATE TABLE pizza_toppings (
      "topping_id" INTEGER,
      "topping_name" TEXT
    );
    INSERT INTO pizza_toppings
      ("topping_id", "topping_name")
    VALUES
      (1, 'Bacon'),
      (2, 'BBQ Sauce'),
      (3, 'Beef'),
      (4, 'Cheese'),
      (5, 'Chicken'),
      (6, 'Mushrooms'),
      (7, 'Onions'),
      (8, 'Pepperoni'),
      (9, 'Peppers'),
      (10, 'Salami'),
      (11, 'Tomatoes'),
      (12, 'Tomato Sauce');

---

**Query #1**

    UPDATE pizza_runner.runner_orders 
     SET pickup_time=NULL 
     WHERE pickup_time='null' or pickup_time='';

There are no results to be displayed.

---
**Query #2**

    UPDATE pizza_runner.runner_orders 
     SET distance=NULL 
     WHERE distance='null' or distance='';

There are no results to be displayed.

---
**Query #3**

    UPDATE pizza_runner.runner_orders 
     SET duration=NULL 
     WHERE duration='null' or duration='';

There are no results to be displayed.

---
**Query #4**

    UPDATE pizza_runner.runner_orders 
     SET cancellation=NULL 
     WHERE cancellation='null' or cancellation='';

There are no results to be displayed.

---
**Query #5**

    UPDATE pizza_runner.customer_orders 
     SET extras=NULL 
     WHERE extras='null' or extras='';

There are no results to be displayed.

---
**Query #6**

    UPDATE pizza_runner.customer_orders 
     SET exclusions=NULL 
     WHERE exclusions='null' or exclusions='';

There are no results to be displayed.

---
**Query #7**

    SELECT
    	COUNT(order_id) AS num_pizzas
    FROM pizza_runner.customer_orders;

| num_pizzas |
| ---------- |
| 14         |

---
**Query #8**

    SELECT
    	COUNT(DISTINCT order_id) AS num_orders
    FROM pizza_runner.customer_orders;

| num_orders |
| ---------- |
| 10         |

---
**Query #9**

    SELECT 
    	runner_id,
        COUNT(DISTINCT order_id) AS num_orders
    FROM pizza_runner.runner_orders
    WHERE cancellation is NULL
    GROUP BY runner_id
    ORDER BY runner_id;

| runner_id | num_orders |
| --------- | ---------- |
| 1         | 4          |
| 2         | 3          |
| 3         | 1          |

---
**Query #10**

    SELECT
    	pizza_name,
        COUNT(p.pizza_id) AS num_pizza
    FROM pizza_runner.customer_orders c
    	JOIN pizza_runner.runner_orders r ON c.order_id=r.order_id
        JOIN pizza_runner.pizza_names p ON p.pizza_id=c.pizza_id
    WHERE cancellation IS NULL
    GROUP BY pizza_name
    ORDER BY num_pizza DESC;

| pizza_name | num_pizza |
| ---------- | --------- |
| Meatlovers | 9         |
| Vegetarian | 3         |

---
**Query #11**

    SELECT
    	customer_id,
    	pizza_name,
        COUNT(p.pizza_id) AS num_pizza
    FROM pizza_runner.customer_orders c
        JOIN pizza_runner.pizza_names p ON p.pizza_id=c.pizza_id
    GROUP BY customer_id, pizza_name
    ORDER BY customer_id, num_pizza DESC;

| customer_id | pizza_name | num_pizza |
| ----------- | ---------- | --------- |
| 101         | Meatlovers | 2         |
| 101         | Vegetarian | 1         |
| 102         | Meatlovers | 2         |
| 102         | Vegetarian | 1         |
| 103         | Meatlovers | 3         |
| 103         | Vegetarian | 1         |
| 104         | Meatlovers | 3         |
| 105         | Vegetarian | 1         |

---
**Query #12**

    WITH orders AS(
      SELECT order_id,
      		COUNT(pizza_id) AS num_pizzas_this_order
      FROM pizza_runner.customer_orders 
      GROUP BY order_id)
    SELECT MAX(num_pizzas_this_order) AS max_num_pizza_order
    FROM orders;

| max_num_pizza_order |
| ------------------- |
| 3                   |

---
**Query #13**

    SELECT 
    	customer_id,
        SUM(CASE WHEN exclusions IS NULL AND extras IS NULL
            THEN 1 ELSE 0 END) AS num_pizzas_without_change,
        SUM(CASE WHEN exclusions IS NOT NULL OR extras IS NOT NULL
            THEN 1 ELSE 0 END) AS num_pizzas_with_change
    FROM pizza_runner.customer_orders
    GROUP BY customer_id
    ORDER BY customer_id;

| customer_id | num_pizzas_without_change | num_pizzas_with_change |
| ----------- | ------------------------- | ---------------------- |
| 101         | 3                         | 0                      |
| 102         | 3                         | 0                      |
| 103         | 0                         | 4                      |
| 104         | 1                         | 2                      |
| 105         | 0                         | 1                      |

---
**Query #14**

    ;

There are no results to be displayed.

---
**Query #15**

    SELECT
    	COUNT(c.pizza_id) AS pizzas_with_exclu_extras
    FROM pizza_runner.customer_orders c 
    	JOIN pizza_runner.runner_orders r ON c.order_id=r.order_id
    WHERE cancellation IS NOT NULL
    	AND (exclusions IS NOT NULL AND extras IS NOT NULL);

| pizzas_with_exclu_extras |
| ------------------------ |
| 1                        |

---
**Query #16**

    SELECT 
    	EXTRACT(HOUR FROM order_time) AS hour_of_the_day,
        COUNT(pizza_id) AS pizzas_volume
    FROM pizza_runner.customer_orders
    GROUP BY hour_of_the_day
    ORDER BY hour_of_the_day;

| hour_of_the_day | pizzas_volume |
| --------------- | ------------- |
| 11              | 1             |
| 13              | 3             |
| 18              | 3             |
| 19              | 1             |
| 21              | 3             |
| 23              | 3             |

---
**Query #17**

    SELECT 
    	TO_CHAR(order_time, 'dy') AS day_of_week,
        COUNT(DISTINCT order_id) AS pizzas_volume
    FROM pizza_runner.customer_orders
    GROUP BY day_of_week
    ORDER BY day_of_week;

| day_of_week | pizzas_volume |
| ----------- | ------------- |
| fri         | 1             |
| sat         | 2             |
| thu         | 2             |
| wed         | 5             |

---
**Query #18**

    SELECT
    	DATE_PART('WEEK', registration_date) AS week_num,
        COUNT(runner_id) AS num_runners
    FROM pizza_runner.runners
    GROUP BY week_num
    ORDER BY week_num;

| week_num | num_runners |
| -------- | ----------- |
| 1        | 1           |
| 2        | 1           |
| 53       | 2           |

---
**Query #19**

    SELECT
    	runner_id,
    	ROUND(AVG(EXTRACT (MINUTE FROM  pickup_time::TIMESTAMP - order_time::TIMESTAMP))::NUMERIC, 2) AS avg_time_delta_in_mins
    FROM pizza_runner.customer_orders c
    	JOIN pizza_runner.runner_orders r ON c.order_id=r.order_id
    GROUP BY runner_id
    ORDER BY runner_id;

| runner_id | avg_time_delta_in_mins |
| --------- | ---------------------- |
| 1         | 15.33                  |
| 2         | 23.40                  |
| 3         | 10.00                  |

---
**Query #20**

    WITH num_pizzas AS(
      SELECT
          c.order_id,
          COUNT(pizza_id) AS num_pizzas,
          ROUND(AVG(EXTRACT(MINUTE FROM  pickup_time::TIMESTAMP - order_time::TIMESTAMP))::NUMERIC, 2) AS time_delta_in_mins
      FROM pizza_runner.customer_orders c
          JOIN pizza_runner.runner_orders r ON c.order_id=r.order_id
      GROUP BY c.order_id
      ORDER BY c.order_id)
    SELECT 
    	num_pizzas,
       	ROUND(AVG(time_delta_in_mins), 2) AS avg_time_delta_in_mins
    FROM num_pizzas
    GROUP BY num_pizzas
    ORDER BY num_pizzas;

| num_pizzas | avg_time_delta_in_mins |
| ---------- | ---------------------- |
| 1          | 12.00                  |
| 2          | 18.00                  |
| 3          | 29.00                  |

---
**Query #21**

    SELECT
    	customer_id,
        ROUND(AVG(SUBSTRING(distance FROM '[0-9.]+')::NUMERIC), 2) AS avg_distance
    FROM pizza_runner.customer_orders c
    	JOIN pizza_runner.runner_orders r ON c.order_id=r.order_id
    GROUP BY customer_id
    ORDER BY customer_id;

| customer_id | avg_distance |
| ----------- | ------------ |
| 101         | 20.00        |
| 102         | 16.73        |
| 103         | 23.40        |
| 104         | 10.00        |
| 105         | 25.00        |

---
**Query #22**

    WITH travel AS(
      SELECT
          c.order_id,
          SUBSTRING(duration FROM '[0-9]+')::NUMERIC AS duration
      FROM pizza_runner.customer_orders c
          JOIN pizza_runner.runner_orders r ON c.order_id=r.order_id)
    SELECT 
    	MAX(duration) - MIN(duration) AS diff_bw_longest_and_shortest_duration_in_mins
    FROM travel;

| diff_bw_longest_and_shortest_duration_in_mins |
| --------------------------------------------- |
| 30                                            |

---
**Query #23**

    WITH order_time_details AS(
      SELECT
          c.order_id,
          runner_id,
          ROUND(AVG(SUBSTRING(duration FROM '[0-9]+')::NUMERIC), 2) AS duration_in_mins,
          ROUND(AVG(SUBSTRING(distance FROM '[0-9.]+')::NUMERIC), 2) AS distance_in_kms
      FROM pizza_runner.customer_orders c 
          JOIN pizza_runner.runner_orders r ON c.order_id=r.order_id
      WHERE cancellation IS NULL
      GROUP BY c.order_id, runner_id)
    SELECT *,
    	ROUND(distance_in_kms/(duration_in_mins/60), 2) AS speed_in_kmph
    FROM order_time_details
    ORDER BY runner_id, order_id;

| order_id | runner_id | duration_in_mins | distance_in_kms | speed_in_kmph |
| -------- | --------- | ---------------- | --------------- | ------------- |
| 1        | 1         | 32.00            | 20.00           | 37.50         |
| 2        | 1         | 27.00            | 20.00           | 44.44         |
| 3        | 1         | 20.00            | 13.40           | 40.20         |
| 10       | 1         | 10.00            | 10.00           | 60.00         |
| 4        | 2         | 40.00            | 23.40           | 35.10         |
| 7        | 2         | 25.00            | 25.00           | 60.00         |
| 8        | 2         | 15.00            | 23.40           | 93.60         |
| 5        | 3         | 15.00            | 10.00           | 40.00         |

---
**Query #24**

    WITH order_count AS(
      SELECT
          runner_id,
          COUNT(order_id) AS total_orders,
          SUM(CASE WHEN cancellation IS NULL THEN 1 ELSE 0 END) AS successful_orders
      FROM pizza_runner.runner_orders
      GROUP BY runner_id)
    SELECT
    	runner_id,
    	ROUND(100.0 * successful_orders/total_orders, 2) AS successful_delivery_pct
    FROM order_count
    ORDER BY runner_id;

| runner_id | successful_delivery_pct |
| --------- | ----------------------- |
| 1         | 100.00                  |
| 2         | 75.00                   |
| 3         | 50.00                   |

---
**Query #25**

    WITH toppings_cte AS(
      SELECT
      	pizza_id,
      	REGEXP_SPLIT_TO_TABLE(toppings, ', ')::INTEGER AS topping_id
      FROM pizza_runner.pizza_recipes
    )
    SELECT
    	pizza_name,
    	STRING_AGG(topping_name, ', ')
    FROM toppings_cte c 
    	JOIN pizza_runner.pizza_names n ON c.pizza_id=n.pizza_id
        JOIN pizza_runner.pizza_toppings t ON t.topping_id=c.topping_id
    GROUP BY pizza_name;

| pizza_name | string_agg                                                            |
| ---------- | --------------------------------------------------------------------- |
| Meatlovers | Bacon, BBQ Sauce, Beef, Cheese, Chicken, Mushrooms, Pepperoni, Salami |
| Vegetarian | Cheese, Mushrooms, Onions, Peppers, Tomatoes, Tomato Sauce            |

---
**Query #26**

    WITH extra_toppings AS(
      SELECT
          REGEXP_SPLIT_TO_TABLE(extras, ', ')::INTEGER AS extra,
          COUNT(order_id) AS num_times_ordered
      FROM pizza_runner.customer_orders
      GROUP BY 1)
    SELECT
    	topping_name AS extra,
        num_times_ordered
    FROM extra_toppings t 
    	JOIN pizza_runner.pizza_toppings p ON t.extra=p.topping_id
    ORDER BY num_times_ordered DESC;

| extra   | num_times_ordered |
| ------- | ----------------- |
| Bacon   | 4                 |
| Cheese  | 1                 |
| Chicken | 1                 |

---
**Query #27**

    WITH exclusion_toppings AS(
      SELECT
          REGEXP_SPLIT_TO_TABLE(exclusions, ', ')::INTEGER AS exclusions,
          COUNT(order_id) AS num_times_ordered
      FROM pizza_runner.customer_orders
      GROUP BY 1)
    SELECT
    	topping_name AS exclusion,
        num_times_ordered
    FROM exclusion_toppings t 
    	JOIN pizza_runner.pizza_toppings p ON t.exclusions=p.topping_id
    ORDER BY num_times_ordered DESC;

| exclusion | num_times_ordered |
| --------- | ----------------- |
| Cheese    | 4                 |
| BBQ Sauce | 1                 |
| Mushrooms | 1                 |

---
**Query #28**

    CREATE TEMP TABLE exclusions AS
      WITH orders AS(
        SELECT
        	order_id,
        	pizza_id,
        	extras,
        	exclusions,
        	COUNT(pizza_id) AS num_pizzas
        FROM pizza_runner.customer_orders 
        GROUP BY order_id, pizza_id, extras, exclusions
        	
        ),
       exclusion_split AS(
        SELECT
            order_id,
            pizza_id,
            REGEXP_SPLIT_TO_TABLE(exclusions, ', ')::INTEGER AS exclusions,
         	num_pizzas
        FROM orders)
      SELECT 
          order_id,
          pizza_id,
          STRING_AGG(topping_name, ', ') AS exclusions,
          MAX(num_pizzas) AS num_pizzas
      FROM exclusion_split s
          JOIN pizza_runner.pizza_toppings t ON t.topping_id=s.exclusions
      GROUP BY order_id, pizza_id;

There are no results to be displayed.

---
**Query #29**

    CREATE TEMP TABLE extras AS
      WITH orders AS(
        SELECT
        	order_id,
        	pizza_id,
        	extras,
        	exclusions,
        	COUNT(pizza_id) AS num_pizzas
        FROM pizza_runner.customer_orders 
        GROUP BY order_id, pizza_id, extras, exclusions
        	
        ),
       extra_split AS(
        SELECT
            order_id,
            pizza_id,
            REGEXP_SPLIT_TO_TABLE(extras, ', ')::INTEGER AS extras,
         	num_pizzas
        FROM orders)
      SELECT 
          order_id,
          pizza_id,
          STRING_AGG(topping_name, ', ') AS extras,
          MAX(num_pizzas) AS num_pizzas
      FROM extra_split s
          JOIN pizza_runner.pizza_toppings t ON t.topping_id=s.extras
      GROUP BY order_id, pizza_id;

There are no results to be displayed.

---
**Query #30**

    WITH order_details AS(
    SELECT
      c.order_id,
      pizza_name,
      x.exclusions,
      r.extras,
      COALESCE(x.num_pizzas, 1) AS num_pizzas
    FROM pizza_runner.customer_orders c
      LEFT JOIN exclusions x ON x.order_id=c.order_id AND x.pizza_id=c.pizza_id
      LEFT JOIN extras r ON r.order_id=c.order_id AND r.pizza_id=c.pizza_id
      JOIN pizza_runner.pizza_names n ON n.pizza_id=c.pizza_id
    )
    SELECT 
    	order_id,
        pizza_name || 
        	CASE WHEN exclusions IS NOT NULL THEN ' Exclude - ' || exclusions ELSE '' END ||
           CASE WHEN extras IS NOT NULL THEN ' Extra - ' || extras ELSE '' END AS description
    FROM order_details
    ORDER BY order_id;

| order_id | description                                                     |
| -------- | --------------------------------------------------------------- |
| 1        | Meatlovers                                                      |
| 2        | Meatlovers                                                      |
| 3        | Meatlovers                                                      |
| 3        | Vegetarian                                                      |
| 4        | Vegetarian Exclude - Cheese                                     |
| 4        | Meatlovers Exclude - Cheese                                     |
| 4        | Meatlovers Exclude - Cheese                                     |
| 5        | Meatlovers Extra - Bacon                                        |
| 6        | Vegetarian                                                      |
| 7        | Vegetarian Extra - Bacon                                        |
| 8        | Meatlovers                                                      |
| 9        | Meatlovers Exclude - Cheese Extra - Bacon, Chicken              |
| 10       | Meatlovers Exclude - BBQ Sauce, Mushrooms Extra - Bacon, Cheese |
| 10       | Meatlovers Exclude - BBQ Sauce, Mushrooms Extra - Bacon, Cheese |

---
**Query #31**

    SELECT 
    	SUM(CASE WHEN pizza_name='Meatlovers' THEN 12
        	 WHEN pizza_name='Vegetarian' THEN 10 END) AS total_revenue
    FROM pizza_runner.customer_orders c 
    	JOIN pizza_runner.runner_orders r ON c.order_id=r.order_id
        JOIN pizza_runner.pizza_names n ON n.pizza_id=c.pizza_id
    WHERE cancellation IS NULL;

| total_revenue |
| ------------- |
| 138           |

---
**Query #32**

    WITH charges AS(
      SELECT
          pizza_name,
          CASE WHEN pizza_name='Meatlovers' THEN 12
               WHEN pizza_name='Vegetarian' THEN 10 END AS pizza_cost,
          ARRAY_LENGTH(STRING_TO_ARRAY(extras, ', ')::int[], 1) AS extra_cost
      FROM pizza_runner.customer_orders c
          JOIN pizza_runner.pizza_names n ON c.pizza_id=n.pizza_id
      	  JOIN pizza_runner.runner_orders rr ON rr.order_id=c.order_id
    	WHERE cancellation IS NULL)
    SELECT
    	pizza_name,
    	SUM(pizza_cost) + SUM(extra_cost) AS total_cost
    FROM charges
    GROUP BY pizza_name;

| pizza_name | total_cost |
| ---------- | ---------- |
| Meatlovers | 111        |
| Vegetarian | 31         |

---
**Query #33**

    CREATE TABLE pizza_runner.runner_ratings(
      "order_id" INT PRIMARY KEY,
      "rating" FLOAT);

There are no results to be displayed.

---
**Query #34**

    INSERT INTO pizza_runner.runner_ratings
    ("order_id", "rating") VALUES
    (1, 4.5),
    (2, 4),
    (3, 3),
    (4, 3.5),
    (5, 5),
    (7, 4),
    (9, 4),
    (10, 3.5);

There are no results to be displayed.

---
**Query #35**

    WITH orders AS(
      SELECT
      	order_id,
      	COUNT(pizza_id) AS num_pizzas
      FROM pizza_runner.customer_orders
      GROUP BY order_id)
    SELECT DISTINCT
    	customer_id,
        o.order_id,
        runner_id,
        rating,
        pickup_time,
        EXTRACT(MINUTE FROM  pickup_time::TIMESTAMP - order_time::TIMESTAMP) AS pickup_delta,
        SUBSTRING(duration FROM '[0-9.]+')::NUMERIC AS delivery_duration,
        ROUND(SUBSTRING(distance FROM '[0-9.]+')::NUMERIC / SUBSTRING(duration FROM '[0-9.]+')::NUMERIC, 2) * 60 AS avg_speed,
        num_pizzas
    FROM orders o
    	LEFT JOIN pizza_runner.customer_orders c ON c.order_id=o.order_id
        LEFT JOIN pizza_runner.runner_orders r ON r.order_id=o.order_id
        LEFT JOIN pizza_runner.runner_ratings rr ON rr.order_id=o.order_id
    ORDER BY order_id;

| customer_id | order_id | runner_id | rating | pickup_time         | pickup_delta | delivery_duration | avg_speed | num_pizzas |
| ----------- | -------- | --------- | ------ | ------------------- | ------------ | ----------------- | --------- | ---------- |
| 101         | 1        | 1         | 4.5    | 2020-01-01 18:15:34 | 10           | 32                | 37.80     | 1          |
| 101         | 2        | 1         | 4      | 2020-01-01 19:10:54 | 10           | 27                | 44.40     | 1          |
| 102         | 3        | 1         | 3      | 2020-01-03 00:12:37 | 21           | 20                | 40.20     | 2          |
| 103         | 4        | 2         | 3.5    | 2020-01-04 13:53:03 | 29           | 40                | 35.40     | 3          |
| 104         | 5        | 3         | 5      | 2020-01-08 21:10:57 | 10           | 15                | 40.20     | 1          |
| 101         | 6        | 3         |        |                     |              |                   |           | 1          |
| 105         | 7        | 2         | 4      | 2020-01-08 21:30:45 | 10           | 25                | 60.00     | 1          |
| 102         | 8        | 2         |        | 2020-01-10 00:15:02 | 20           | 15                | 93.60     | 1          |
| 103         | 9        | 2         | 4      |                     |              |                   |           | 1          |
| 104         | 10       | 1         | 3.5    | 2020-01-11 18:50:20 | 15           | 10                | 60.00     | 2          |

---
**Query #36**

    WITH expenses AS(
    	SELECT  
      		r.order_id,
      		SUM(CASE WHEN pizza_id=1 THEN 12
        	 WHEN pizza_id=2 THEN 10 END) AS total_revenue,
      		ROUND(AVG(SUBSTRING(distance FROM '[0-9.]+')::NUMERIC) * 0.3, 2) AS runner_expense
      	FROM pizza_runner.runner_orders r 
      		JOIN pizza_runner.customer_orders c ON c.order_id=r.order_id
      	GROUP BY r.order_id)
    SELECT
    	SUM(total_revenue-runner_expense) AS net_revenue
    FROM expenses;

| net_revenue |
| ----------- |
| 94.44       |

---
**Query #37**

    INSERT INTO pizza_runner.pizza_names
      ("pizza_id", "pizza_name")
    VALUES
    (3, 'SupremePizza');

There are no results to be displayed.

---
**Query #38**

    INSERT INTO pizza_runner.pizza_recipes
      ("pizza_id", "toppings")
    VALUES
    (3, '1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12');

There are no results to be displayed.

---

[View on DB Fiddle](https://www.db-fiddle.com/f/7VcQKQwsS3CTkGRFG7vu98/65)